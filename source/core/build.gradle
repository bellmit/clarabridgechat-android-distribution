buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.github.dcendents:android-maven-gradle-plugin:2.1"
        classpath "com.android.tools.build:gradle:3.3.2"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

group = "com.clarabridge"
def vendorId = "\"clarabridgeChat\""

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "com.github.dcendents.android-maven"

def versionMajor = 2
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

version = "$versionMajor.$versionMinor.$versionPatch"

android {
    compileSdkVersion 29
    defaultPublishConfig "release"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName version
        buildConfigField('String', 'VERSION_NAME',  "\"$version\"")
        buildConfigField("String", "VENDOR_ID", vendorId)
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            consumerProguardFiles "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude "META-INF/LICENSE"
        exclude "META-INF/NOTICE"
        exclude "META-INF/INDEX.LIST"
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    sourceSets {
        test.java.srcDirs += "src/test/kotlin"
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging "aar"
                name "ClarabridgeChat"
                url "http://clarabridgechat.io"
            }
        }
    }
}

def firebaseMessagingVersion = "18.0.0" // Limited by androidx
def gsonVersion = "2.8.6"
def okHttpVersion = "3.12.6" // Limited by Java 8
def retrofitVersion = "2.6.2"
def daggerVersion = "2.25.2"

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "com.google.firebase:firebase-messaging:${firebaseMessagingVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation 'androidx.annotation:annotation:1.1.0'

    implementation "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-inline:2.28.2"
    testImplementation "com.google.truth:truth:1.0"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"

    // No reason to update as we aim to remove these in the future
    testImplementation "org.robolectric:robolectric:4.2"
}

def classesFilename = "core-$version-classes.jar"

task copyClassesJar(type: Copy) {
    from("build/intermediates/aar_main_jar/release/")
    into("build/libs/")
    include("classes.jar")
    rename("classes.jar", classesFilename)
}

task cleanClassesJar(type: Delete) {
    delete "build/libs/$classesFilename"
}

install.dependsOn copyClassesJar
clean.dependsOn cleanClassesJar

artifacts {
    def classesJarFile = file("build/libs/$classesFilename")
    archives classesJarFile
}

task printVersion {
    doLast {
        println version
    }
}
